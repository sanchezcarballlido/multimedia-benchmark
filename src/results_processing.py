# src/vaf/pipeline.py
import os
import pandas as pd
import xml.etree.ElementTree as ET
import re
import subprocess

def _get_bitrate_from_file(file_path):
    """
    Extracts the bitrate from a media file using gst-discoverer-1.0.
    Returns bitrate in kbps.
    """
    if not os.path.exists(file_path):
        return None

    try:
        command = f"gst-discoverer-1.0 -v {file_path}"
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        
        # Use regex to find the bitrate line
        match = re.search(r"bitrate:\s+(\d+)", result.stdout)
        if match:
            bitrate_bps = float(match.group(1))
            return bitrate_bps / 1000  # Convert to kbps
            
    except (subprocess.CalledProcessError, FileNotFoundError):
        print(f"Warning: Could not get bitrate for {file_path}. Is `gst-discoverer-1.0` installed?")
        return None
    
    return None

def _extract_vmaf_from_xml(xml_path):
    """
    Parses the VMAF score from the XML log file generated by FFmpeg.
    """
    try:
        tree = ET.parse(xml_path)
        vmaf_score = tree.find('.//metric[@name="vmaf"]').attrib['mean']
        return float(vmaf_score)
    except (ET.ParseError, FileNotFoundError, AttributeError):
        return None

def process_results(results_dir):
    all_data = []
    for root, _, files in os.walk(results_dir):
        for file in files:
            if file.endswith("_encoding.log"):
                parts = root.replace(results_dir, '').strip(os.sep).split(os.sep)
                if len(parts) < 3: continue

                log_path = os.path.join(root, file)
                encoded_file_path = log_path.replace("_encoding.log", ".mp4")
                vmaf_log_path = log_path.replace("_encoding.log", "_vmaf.log")

                data = {
                    'codec': parts[0],
                    'crf': parts[1],
                    'resolution': parts[2],
                    'preset': file.split('_')[1],
                    'bitrate_kbps': _get_bitrate_from_file(encoded_file_path),
                    'vmaf': _extract_vmaf_from_xml(vmaf_log_path)
                }
                all_data.append(data)
    
    if not all_data:
        print("Advertencia: No se procesaron datos. Verifica la estructura de carpetas y los logs.")
        return

    df = pd.DataFrame(all_data)
    df.to_csv(os.path.join(results_dir, "combined_data.csv"), index=False)